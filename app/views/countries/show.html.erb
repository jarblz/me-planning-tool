<div class="container map-home">
  <div id='map-outer' class="col-lg-12">
    <div class="col-lg-8">
      <ol class="breadcrumb">
        <li><a href="<%= root_url %>">Home</a></li>
        <li class="active"><%= @country.name %> </a></li>
      </ol>
      <div class="row row-map">
        <div class='map-container'>
          <div id='map' class="map-canvas">
          </div>
        </div>
      </div>
    </div>
    <%= render partial: 'sidebar', locals: {
      projects: @projects,
      country: @country,
      search_project_name: @search_project_name,
      search_disease_name: @search_disease_name } %>

    <%= render partial: 'country_indicators', locals: {
      country: @country,
      indicators: @country_indicators,
      search_project_name: @search_project_name,
      search_disease_name: @search_disease_name,
      secondary_name: @secondary_indicator_name,
      primary_name: @primary_indicator_name } %>

    <%= render partial: 'filters', locals: {
      search_project: @search_project,
      search_disease: @search_disease,
      diseases: @diseases,
      projects: @projects,
      country: @country} %>

  </div>
</div>

<script type="text/javascript">
  L.mapbox.accessToken = 'pk.eyJ1IjoiamFyZWRhYmxlcyIsImEiOiJjaWk2Zmt1eXAwMWtvdDBrZjRybmNjdmRqIn0.YRNrryyThhQ5kT69-zkuSw'
  var mapboxTiles = L.tileLayer('https://api.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=' + L.mapbox.accessToken, {
    attribution: '<a href="http://www.mapbox.com/about/maps/" target="_blank">Terms &amp; Feedback</a>'
  });
  var map = L.map('map')
    .addLayer(mapboxTiles)
    .setView([5.0089434, 25.850055], 3);
  country = $.parseJSON("<%= escape_javascript(@country_geometry.html_safe)%>");


  //non-highlighted style
  var defaultStyle = {
    fillColor: '#8bebad',
    weight: .5,
    opacity: .7,
    color: 'black',
    dashArray: '3',
    fillOpacity: 0.4
  };

  var highlightStyle = {
    fillColor: '#66ac7e',
    weight: .5,
    opacity: .7,
    color: 'black',
    dashArray: '3',
    fillOpacity: 0.4
  };



  var onEachFeature = function(feature, layer) {
    // A function that will set up a bunch of options for each layer we create
    layer.setStyle(defaultStyle);
    layer.on({
      mouseover: highlightFeature,
      mouseout: resetHighlight
    });
  };

  // for the current country passed, set up the geometry and give the layer necessary properties
  countryPolygon = L.geoJson($.parseJSON(country.geometry), {
    onEachFeature: onEachFeature
  }).addTo(map);

  // set map bounds to the current country
  map.fitBounds(countryPolygon.getBounds())


  function highlightFeature(e) {
    var layer = e.target;
    layer.setStyle(highlightStyle);
    // so the border doesn't clash with adjacent borders
    if (!L.Browser.ie && !L.Browser.opera) {
        layer.bringToFront();
    }
  }

  //un-highlight
  function resetHighlight(e) {
    var layer = e.target;
    layer.setStyle(defaultStyle);
  }

  //zoom to country
  function zoomToFeature(e) {
    map.fitBounds(e.target.getBounds());
  }

  //////////////////////////////////////////
  $(function() {
    $('input[name="date_range"]').daterangepicker();
  });

</script>
